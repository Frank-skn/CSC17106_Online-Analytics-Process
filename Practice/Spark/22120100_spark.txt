// Spark-shell exercises with new inputs

// 1. Bình phương số
val rdd1 = spark.sparkContext.parallelize(List(7, 9, 12, 15))
val rdd1Squared = rdd1.map(x => x*x)
rdd1Squared.collect()

// 2. Lọc chuỗi dài > 5 ký tự
val rdd2 = spark.sparkContext.parallelize(List("HCM", "University", "Science", "Data", "Analysis"))
val rdd2Filtered = rdd2.filter(s => s.length > 5)
rdd2Filtered.collect()

// 3. Union 2 RDD số
val rdd3a = spark.sparkContext.parallelize(List(100, 200))
val rdd3b = spark.sparkContext.parallelize(List(300, 400))
val rdd3union = rdd3a.union(rdd3b)
rdd3union.collect()

// 4. Count phần tử trong RDD số
val rdd4 = spark.sparkContext.parallelize(List(3, 6, 9, 12, 15))
val count4 = rdd4.count()
println(count4)

// 5. Lấy phần tử đầu tiên chuỗi
val rdd5 = spark.sparkContext.parallelize(List("I", "am", "a", "student", "at", "HCM", "University", "of", "Science"))
val first5 = rdd5.first()
println(first5)

// 6. Tổng các số trong RDD
val rdd6 = spark.sparkContext.parallelize(List(5, 10, 15, 20))
val sum6 = rdd6.reduce(_ + _)
println(sum6)

// 7. Collect và in các số
val rdd7 = spark.sparkContext.parallelize(List(2, 4, 6, 8))
val collected7 = rdd7.collect()
collected7.foreach(println)

// 8. Nhân mỗi số với 2 rồi tính tổng
val rdd8 = spark.sparkContext.parallelize(List(1, 3, 5))
val rdd8Mapped = rdd8.map(_ * 2)
val sum8 = rdd8Mapped.reduce(_ + _)
println(sum8)

// 9. Lọc chuỗi chứa "HCM", đếm số chuỗi
val rdd9 = spark.sparkContext.parallelize(List("I am a student", "HCM University", "Science and Technology", "Go HCM!"))
val rdd9Filtered = rdd9.filter(_.contains("HCM"))
val count9 = rdd9Filtered.count()
println(count9)

// 10. Bình phương mỗi số, tính tổng bình phương
val rdd10 = spark.sparkContext.parallelize(List(3, 4, 5))
val rdd10Squared = rdd10.map(x => x*x)
val sum10 = rdd10Squared.reduce(_ + _)
println(sum10)
